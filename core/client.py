from discord import Message, Intents, errors
from discord.ext.commands import Bot, Context, errors
from discord_components import DiscordComponents, Interaction

import embeds
from core.config import DEVELOPERS_ID, BOT_ID
from core.button_parser import button_parser
from core.state_machine import QuizcordStateMachine, STATE_MACHINE
from data.quiz_func import add_quiz, update_quiz, get_server_quizzes, \
    get_user_quizzes
from data.question_func import update_question
from data.admin_func import delete_empty_quizzes

intents = Intents.default()
intents.members = True
intents.presences = True
client = Bot(command_prefix='-', intents=intents)


# SERVICE
@client.event
async def on_connect():
    print("[BOT] Connected!")


@client.event
async def on_ready():
    # ADD COMPONENTS
    DiscordComponents(client)

    # REPORT
    print(f"[BOT] Ready! Logged in as {client.user}")


# BUTTONS
@client.event
async def on_button_click(interaction: Interaction):
    if not interaction.responded:
        await button_parser(interaction, client)


# MESSAGES
@client.command(name='–ø–æ–º–æ—â—å')
async def get_help(ctx: Context):
    embed = embeds.Help()
    if ctx.guild:
        await ctx.channel.send(embed=embed, components=embed.keyboard)
        print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç '
              f'—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')
    else:
        await ctx.author.send(embed=embed, components=embed.keyboard)
        print(f'[PERSONAL] {ctx.author.name} <{ctx.author.id}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç '
              f'—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')


@client.command(name='–∫–≤–∏–∑—ã')
async def get_quizzes_for_server(ctx: Context, user_id=None):
    if ctx.guild:
        if not user_id:
            await ctx.channel.send(
                embed=embeds.ServerQuizzes(ctx.guild.id)
            )
            print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> –ø–æ–ª—É—á–∞–µ—Ç '
                  f'—Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–≤–∏–∑–æ–≤')
        else:
            user_id = user_id.replace('<@!', '', 1)
            user_id = user_id.replace('<@', '', 1)
            user_id = user_id.replace('>', '', 1)

            try:
                user = client.get_user(int(user_id))
                if not user:
                    raise ValueError
            except ValueError:
                await ctx.channel.send('–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∞–≤—Ç–æ—Ä–∞')
                print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> '
                      f'–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–∏–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å '
                      f'–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id ({user_id})')
                return

            if user.id == int(BOT_ID):
                await ctx.channel.send(
                    f'<@{BOT_ID}> –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∫–≤–∏–∑—ã'
                )
                print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> '
                      f'–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–∏–∑–æ–≤ –æ—Ç quizcord')
            else:
                await get_quizzes_by_user(ctx, '–∫–≤–∏–∑—ã', author=user)
                print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> –ø–æ–ª—É—á–∞–µ—Ç '
                      f'—Å–ø–∏—Å–æ–∫ –∫–≤–∏–∑–æ–≤ –æ—Ç {user.nick} <{user.id}>')


@client.command(name='—Å–æ–∑–¥–∞—Ç—å')
async def create_quiz(ctx: Context):
    if ctx.author.id in STATE_MACHINE:
        await ctx.send('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        print(f'[WARNING] {ctx.author.name} <{ctx.author.id}> '
              f'–ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑, –Ω–∞—Ö–æ–¥—è—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        return

    try:
        await ctx.author.send('–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–≤–∏–∑...')
        await ctx.author.send(
            '*–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—É—Å—Ç–æ–π –∫–≤–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '
            '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!*'
        )

        if ctx.guild:
            await ctx.message.add_reaction('üì®')

            quiz_id = add_quiz(ctx.author.id, ctx.guild.id)

            view_quiz = embeds.ViewQuiz(quiz_id, ctx.guild.name, ctx.author.id)
            await ctx.author.send(
                embed=view_quiz,
                components=view_quiz.keyboard
            )
            print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> '
                  f'—Å–æ–∑–¥–∞—ë—Ç –∫–≤–∏–∑ —Å —Å–µ—Ä–≤–µ—Ä–∞')

        elif len(ctx.author.mutual_guilds) == 1:
            quiz_id = add_quiz(ctx.author.id, ctx.author.mutual_guilds[0].id)

            view_quiz = embeds.ViewQuiz(
                quiz_id,
                ctx.author.mutual_guilds[0].name,
                ctx.author.id
            )
            await ctx.author.send(
                embed=view_quiz,
                components=view_quiz.keyboard
            )
            print(f'[PERSONAL] {ctx.author.name} <{ctx.author.id}> '
                  f'—Å–æ–∑–¥–∞—ë—Ç –∫–≤–∏–∑, –∏–º–µ—è –æ–¥–∏–Ω –æ–±—â–∏–π —Å–µ—Ä–≤–µ—Ä')

        else:
            STATE_MACHINE[ctx.author.id] = QuizcordStateMachine(
                initial='quiz_set_server'
            )

            STATE_MACHINE[ctx.author.id].servers = ctx.author.mutual_guilds

            servers_names = [
                server.name for server in ctx.author.mutual_guilds
            ]

            await ctx.author.send(embed=embeds.ChooseServer(servers_names))
            print(f'[PERSONAL] {ctx.author.name} <{ctx.author.id}> '
                  f'–≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–≤–∏–∑–∞')

    except errors.Forbidden:
        await ctx.channel.send(
            '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º'
        )
        print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> '
              f'–ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏')


@client.command(name='–º–æ–∏')
async def get_quizzes_by_user(ctx: Context, ctx2, author=None):
    if not author:
        author_id = ctx.author.id
        author_name = ctx.author.name
    else:
        author_id = author.id
        author_name = author.name

    if ctx2 == '–∫–≤–∏–∑—ã':
        if ctx.guild:
            await ctx.channel.send(
                embed=await embeds.embed_user_quizzes(
                    author_id,
                    author_name,
                    ctx.guild.id
                )
            )
            print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∫–≤–∏–∑–æ–≤')
        else:
            await ctx.author.send(
                embed=await embeds.embed_user_quizzes(
                    author_id,
                    author_name,
                    client=client
                )
            )
            print(f'[PERSONAL] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∫–≤–∏–∑–æ–≤')


@client.command(name='–∫–≤–∏–∑')
async def get_quiz_by_id(ctx: Context, *quiz_id):
    if not quiz_id:
        msg = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING {"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∏–∑ –±–µ–∑ id')

    elif not quiz_id[0].isdigit() or len(quiz_id) > 1:
        msg = '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING {"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∏–∑ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id '
              f'({quiz_id})')

    elif ctx.guild:
        quiz_id = int(quiz_id[0])
        server_quizzes = get_server_quizzes(ctx.guild.id)
        quizzes_id = [quiz.id for quiz in server_quizzes]

        if quiz_id in quizzes_id:
            view_quiz = embeds.ViewQuiz(
                quiz_id,
                ctx.guild.name,
                ctx.author.id,
                is_server=True
            )
            await ctx.channel.send(
                embed=view_quiz,
                components=view_quiz.keyboard
            )
            print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ª—É—á–∞–µ—Ç –∫–≤–∏–∑ #{quiz_id}')
        else:
            await ctx.channel.send('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–≤–∏–∑—É')
            print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∏–∑ #{quiz_id}, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')

    else:
        quiz_id = int(quiz_id[0])
        quizzes_list = get_user_quizzes(ctx.author.id)
        quizzes_id = [quiz.id for quiz in quizzes_list]
        quizzes_server_id = [quiz.server_id for quiz in quizzes_list]

        if quiz_id in quizzes_id:
            server = client.get_guild(
                quizzes_server_id[quizzes_id.index(quiz_id)]
            )

            view_quiz = embeds.ViewQuiz(quiz_id, server.name, ctx.author.id)
            await ctx.author.send(
                embed=view_quiz,
                components=view_quiz.keyboard
            )
            print(f'[PERSONAL] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ª—É—á–∞–µ—Ç –∫–≤–∏–∑ #{quiz_id}')
        else:
            await ctx.author.send('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–≤–∏–∑—É')
            print(f'[WARNING P] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∏–∑ #{quiz_id}, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')


@client.command(name='—Ä–µ–π—Ç–∏–Ω–≥')
async def get_quiz_rating(ctx: Context, *quiz_id):
    if not quiz_id:
        msg = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞'
        if ctx.guild:
            await ctx.channel.send(msg)
            print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–≤–∏–∑–∞ –±–µ–∑ id')

    elif not quiz_id[0].isdigit() or len(quiz_id) > 1:
        msg = '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞'
        if ctx.guild:
            await ctx.channel.send(msg)
            print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è '
                  f'–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–≤–∏–∑–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id ({quiz_id})')

    elif ctx.guild:
        quiz_id = int(quiz_id[0])
        server_quizzes = get_server_quizzes(ctx.guild.id)
        quizzes_id = [quiz.id for quiz in server_quizzes]

        if quiz_id in quizzes_id:
            await ctx.channel.send(
                embed=embeds.QuizRating(quiz_id)
            )
            print(f'[SERVER] {ctx.author.name} <{ctx.author.id}> '
                  f'–ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–≤–∏–∑–∞ #{quiz_id}')
        else:
            await ctx.channel.send('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–≤–∏–∑—É')
            print(f'[WARNING S] {ctx.author.name} <{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è '
                  f'–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–≤–∏–∑ #{quiz_id}, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')


@client.event
async def on_message(message: Message):
    if message.content.startswith(client.command_prefix):
        await client.process_commands(message)

    elif message.author.id in STATE_MACHINE and not message.guild:
        user = STATE_MACHINE[message.author.id]

        match user.state:
            case 'quiz_set_server':
                if user.servers != message.author.mutual_guilds:
                    STATE_MACHINE[message.author.id].servers = \
                        message.author.mutual_guilds

                    await message.author.send(
                        '–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )

                    servers_names = [
                        server.name for server in message.author.mutual_guilds
                    ]

                    await message.author.send(
                        embed=embeds.ChooseServer(servers_names)
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä, '
                          f'–Ω–æ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω')

                elif message.content.isdigit():
                    if 0 < int(message.content) <= len(user.servers):
                        server = user.servers[int(message.content) - 1]

                        quiz_id = add_quiz(message.author.id, server.id)
                        STATE_MACHINE[message.author.id].quiz_id = quiz_id

                        await message.author.send(
                            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä **{server.name}**'
                        )

                        view_quiz = embeds.ViewQuiz(
                            quiz_id,
                            server.name,
                            message.author.id
                        )
                        await message.author.send(
                            embed=view_quiz,
                            components=view_quiz.keyboard
                        )
                        print(f'[PERSONAL] {message.author.name} '
                              f'<{message.author.id}> –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä '
                              f'({server.name} <{server.id}>)')

                        del STATE_MACHINE[message.author.id]

                    else:
                        await message.author.send(
                            '–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. '
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                        )
                        print(f'[WARNING P] {message.author.name} '
                              f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å '
                              f'–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞')

                else:
                    await message.author.send(
                        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å '
                          f'—Å–µ—Ä–≤–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º')

            case 'quiz_set_title':
                if len(message.content) > 200:
                    await message.author.send(
                        '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º '
                          f'–¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞')

                else:
                    STATE_MACHINE[message.author.id].quiz_title_changed()

                    quiz_id = STATE_MACHINE[message.author.id].quiz_id

                    update_quiz(quiz_id, title=message.content)

                    embed, keyboard = await embeds.embed_change_quiz(
                        int(quiz_id),
                        client
                    )
                    await message.author.send(
                        embed=embed,
                        components=keyboard
                    )
                    print(f'[PERSONAL] {message.author.name} '
                          f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞ '
                          f'#{quiz_id} ({message.content})')

            case 'quiz_set_description':
                if len(message.content) > 2000:
                    await message.author.send(
                        '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º '
                          f'–¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞')

                else:
                    STATE_MACHINE[message.author.id].quiz_description_changed()

                    quiz_id = STATE_MACHINE[message.author.id].quiz_id

                    if message.content == '.':
                        update_quiz(quiz_id, description='')
                    else:
                        update_quiz(quiz_id, description=message.content)

                    embed, keyboard = await embeds.embed_change_quiz(
                        int(quiz_id),
                        client
                    )
                    await message.author.send(
                        embed=embed,
                        components=keyboard
                    )
                    print(f'[PERSONAL] {message.author.name} '
                          f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞ '
                          f'#{quiz_id} ({message.content})')

            case 'question_set_text':
                if len(message.content) > 200:
                    await message.author.send(
                        '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º '
                          f'–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')

                else:
                    STATE_MACHINE[message.author.id].question_text_changed()

                    question_id = STATE_MACHINE[message.author.id].question_id
                    number = STATE_MACHINE[message.author.id].question_number
                    quantity = \
                        STATE_MACHINE[message.author.id].question_quantity

                    update_question(question_id, text=message.content)

                    embed = embeds.ChangeQuestion(
                        question_id,
                        number,
                        quantity
                    )

                    msg_media = await message.author.send('·Ö†')
                    STATE_MACHINE[message.author.id].msg_media = msg_media
                    if embed.media:
                        await msg_media.edit(embed.media)

                    await message.author.send(
                        embed=embed,
                        components=embed.keyboard
                    )
                    print(f'[PERSONAL] {message.author.name} '
                          f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ '
                          f'#{question_id} ({message.content})')

            case 'question_set_explanation':
                if len(message.content) > 1000:
                    await message.author.send(
                        '–ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º '
                          f'–¥–ª–∏–Ω–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞')

                else:
                    STATE_MACHINE[
                        message.author.id
                    ].question_explanation_changed()

                    question_id = STATE_MACHINE[message.author.id].question_id
                    number = STATE_MACHINE[message.author.id].question_number
                    quantity = \
                        STATE_MACHINE[message.author.id].question_quantity

                    if message.content == '.':
                        update_question(
                            question_id,
                            explanation=''
                        )
                    else:
                        update_question(
                            question_id,
                            explanation=message.content
                        )

                    embed = embeds.ChangeQuestion(
                        question_id,
                        number,
                        quantity
                    )

                    msg_media = await message.author.send('·Ö†')
                    STATE_MACHINE[message.author.id].msg_media = msg_media
                    if embed.media:
                        await msg_media.edit(embed.media)

                    await message.author.send(
                        embed=embed,
                        components=embed.keyboard
                    )
                    print(f'[PERSONAL] {message.author.name} '
                          f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ '
                          f'#{question_id} ({message.content})')

            case 'question_set_media':
                question_id = STATE_MACHINE[message.author.id].question_id
                number = STATE_MACHINE[message.author.id].question_number
                quantity = \
                    STATE_MACHINE[message.author.id].question_quantity

                try:
                    if message.content == '.':
                        update_question(
                            question_id,
                            media=''
                        )
                    elif message.content == '_':
                        update_question(
                            question_id,
                            media='_'
                        )
                    else:
                        update_question(
                            question_id,
                            media=message.attachments[0].proxy_url
                        )

                    STATE_MACHINE[message.author.id].question_media_changed()

                    embed = embeds.ChangeQuestion(
                        question_id,
                        number,
                        quantity
                    )

                    msg_media = await message.author.send('·Ö†')
                    STATE_MACHINE[message.author.id].msg_media = msg_media
                    if embed.media:
                        await msg_media.edit(embed.media)

                    await message.author.send(
                        embed=embed,
                        components=embed.keyboard
                    )
                    print(f'[PERSONAL] {message.author.name} '
                          f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç –º–µ–¥–∏–∞ –≤–æ–ø—Ä–æ—Å–∞ '
                          f'#{question_id} ({message.content})')

                except IndexError:
                    await message.author.send(
                        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ '
                          f'–≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º')

            case 'question_set_answers':
                if message.content == '_':
                    answers = '_'
                else:
                    answers = message.content.split('\n')

                if len(message.content) > 1000:
                    await message.author.send(
                        '–û–±—â–∏–π —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å '
                        '1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º '
                          f'–¥–ª–∏–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞')
                    return

                if len(answers) > 5 and answers != '_':
                    await message.author.send(
                        '–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 5. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ 5 '
                          f'–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å')
                    return

                right_answer_count = 0
                right_answer = None

                for i, answer in enumerate(answers):
                    if answer.startswith('+'):
                        right_answer = i
                        right_answer_count += 1
                        answers[i] = answer[1:]

                        if not answer[1:]:
                            await message.author.send(
                                '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. '
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                            )
                            print(f'[WARNING P] {message.author.name} '
                                  f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ '
                                  f'–ø—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
                            return

                if right_answer_count == 0 and answers != '_':
                    await message.author.send(
                        '–í–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ '
                          f'–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –Ω–µ —É–∫–∞–∑–∞–≤ –≤–µ—Ä–Ω—ã–π')
                    return

                if right_answer_count > 1 and answers != '_':
                    await message.author.send(
                        '–£–∫–∞–∑–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. '
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                    )
                    print(f'[WARNING P] {message.author.name} '
                          f'<{message.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ '
                          f'–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, —É–∫–∞–∑–∞–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω—ã—Ö')
                    return

                question_id = STATE_MACHINE[message.author.id].question_id
                number = STATE_MACHINE[message.author.id].question_number
                quantity = STATE_MACHINE[message.author.id].question_quantity

                update_question(
                    question_id,
                    answers=answers,
                    right_answer=right_answer
                )

                STATE_MACHINE[message.author.id].question_answers_changed()

                embed = embeds.ChangeQuestion(question_id, number, quantity)

                msg_media = await message.author.send('·Ö†')
                STATE_MACHINE[message.author.id].msg_media = msg_media
                if embed.media:
                    await msg_media.edit(embed.media)

                await message.author.send(
                    embed=embed,
                    components=embed.keyboard
                )
                print(f'[PERSONAL] {message.author.name} '
                      f'<{message.author.id}> –∏–∑–º–µ–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '
                      f'–≤–æ–ø—Ä–æ—Å–∞ #{question_id}\n({message.content})')


# ADMIN COMMANDS
@client.command(name='–æ—á–∏—Å—Ç–∏—Ç—å')
async def del_empty_quizzes(ctx: Context, ctx2=None):
    if not ctx2:
        msg = '–£—Ç–æ—á–Ω–∏—Ç–µ, –æ—á–∏—Å—Ç–∫—É –∫–∞–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING A{"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É, –Ω–µ —É–∫–∞–∑–∞–≤ '
              f'–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
        return

    if ctx.author.id not in DEVELOPERS_ID:
        msg = '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING A{"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ '
              f'–±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ')
        return

    match ctx2:
        case '–∫–≤–∏–∑—ã':
            delete_empty_quizzes()
            await ctx.message.add_reaction('‚úÖ')
            print(f'[ADMIN] {ctx.author.name} <{ctx.author.id}> '
                  f'–≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫–≤–∏–∑–æ–≤')


@client.command(name='–æ—Ç–º–µ–Ω–∞')
async def cancel(ctx: Context):
    if ctx.author.id not in DEVELOPERS_ID:
        msg = '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING A{"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ '
              f'–±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ')
        return

    if ctx.author.id in STATE_MACHINE:
        del STATE_MACHINE[ctx.author.id]
        await ctx.message.add_reaction('‚úÖ')
        print(f'[ADMIN] {ctx.author.name} <{ctx.author.id}> –æ—Ç–º–µ–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã')
    else:
        await ctx.message.add_reaction('‚ùå')
        print(f'[WARNING A] {ctx.author.name} <{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è '
              f'–æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–æ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')


@client.command(name='—Å–æ—Å—Ç–æ—è–Ω–∏—è')
async def get_users_states(ctx: Context):
    if ctx.author.id not in DEVELOPERS_ID:
        msg = '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'
        if ctx.guild:
            await ctx.channel.send(msg)
        else:
            await ctx.author.send(msg)
        print(f'[WARNING A{"S" if ctx.guild else "P"}] {ctx.author.name} '
              f'<{ctx.author.id}> –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ '
              f'–±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ')
        return

    response = []

    if not STATE_MACHINE:
        response.append('–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É—Å—Ç–∞')

    else:
        for user_id, state in STATE_MACHINE.items():
            user = client.get_user(user_id)
            response.append(f'```{user.name}\t{user.id}\t{state.state}```')

    if ctx.guild:
        await ctx.channel.send('\n'.join(response))
    else:
        await ctx.author.send('\n'.join(response))
    print(f'[ADMIN] {ctx.author.name} <{ctx.author.id}> –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è '
          f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
